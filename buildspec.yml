version: 0.2
env:
  variables:
    BASE_VERSION: "0.1.0"
phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)

      - echo Installing .net core sdk 3.1 on Ubuntu 18.04
      - wget -q https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
      - dpkg -i packages-microsoft-prod.deb
      - add-apt-repository universe
      - apt-get update
      - apt-get install apt-transport-https
      - apt-get update
      - apt-get install -y dotnet-sdk-3.1
      
      - echo Installing Sonar Scanner..
      - dotnet tool install --global dotnet-sonarscanner --version 4.8.0
  build:
    commands:
      - echo Build started...
      - cd src
      - chmod +x ./Host/nuget-setup.sh
      - ./Host/nuget-setup.sh
      - dotnet add UnitTests package coverlet.msbuild
      - dotnet add UnitTests package JUnitTestLogger --version 1.1.0
      - dotnet add UnitTests package Codecov --version 1.10.0
      - dotnet restore       
      - dotnet build

      - echo Running unit tests...
#      - dotnet test --no-build --logger trx --verbosity:normal /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=opencover /p:threshold=80
      - dotnet test --no-build --logger "junit;LogFilePath=TestResults/TestResults.xml" --verbosity:normal /p:CollectCoverage=true /p:CoverletOutput=TestResults/ /p:CoverletOutputFormat=opencover /p:threshold=80
      - dotnet sonarscanner begin /k:$PROJECTKEY /d:sonar.host.url=https://sonarcloud.io /d:sonar.cs.opencover.reportsPaths="UnitTests/TestResults/coverage.opencover.xml" /d:sonar.login=$TOKEN /d:sonar.scm.disabled=true /o:$ORGANIZATION /d:sonar.coverage.exclusions=”HelloWorld.cs”
      - dotnet build --no-restore
      - dotnet sonarscanner end /d:sonar.login=${TOKEN}
      - curl -s https://codecov.io/bash > codecov
      - chmod +x codecov
      - ./codecov -f "UnitTests/TestResults/coverage.opencover.xml" -t $CODECOV_TOKEN
      - dotnet tool install dotnet-reportgenerator-globaltool --tool-path .
      - ./reportgenerator "-reports:UnitTests/TestResults/coverage.opencover.xml" "-targetdir:UnitTests/TestResults" -reporttypes:HTML;
      - mv UnitTests/TestResults/coverage.opencover.xml UnitTests/TestResults/coverage.opencoverxml

      - echo Building the Docker image...
      - cd Host
      - ECR_REPOSITORY=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPOSITORY_NAME
      - COMMIT_SHORT_HASH=$(printf "%.11s" $COMMIT_ID)
      - IMAGE_TAG="${REPOSITORY_NAME}_${BRANCH_NAME}_${BASE_VERSION}_${CODEBUILD_BUILD_NUMBER}_${COMMIT_SHORT_HASH}"
      - docker build -t $ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REPOSITORY:latest .

      - echo Pushing the Docker image...
      - docker push $ECR_REPOSITORY:$IMAGE_TAG
      - docker push $ECR_REPOSITORY:latest
      - echo Done
reports: #New
  TestReports: # CodeBuild will create a report group called "SurefireReports".
    files: #Store all of the files
      - ./src/UnitTests/TestResults/*
artifacts:
  files:
    - ./src/UnitTests/TestResults/*
